# We say that Pattern is a most frequent k-mer in Text if it maximizes Count(Text, Pattern) among all k-mers. For example, "ACTAT" is a most frequent 5-mer in "ACAACTATGCATCACTATCGGGAACTATCCT", and "ATA" is a most frequent 3-mer of "CGATATATCCATAG".

# Frequent Words Problem
# Find the most frequent k-mers in a string.

# Given: A DNA string Text and an integer k.

# Return: All most frequent k-mers in Text (in any order).


#ba1b
def pattern_count(text,k_mer):
    count = 0
    for i in range(0,len(text)-len(k_mer)+1):
        if text[i:i+len(k_mer)] == k_mer:
            count += 1
    return count        


appear_time = pattern_count('TGATCGCAGATGATCGCTGATCGCGTGATCGCGGTGATCGCTGATCGCTTGATCGCAGGTAATGATCGCTGATCGCTATGCGAGTGATCGCATGATCGCCGTGATCGCAGATGATCGCCTACTGATCGCGCCGTGATCGCTGTATGATCGCCATGATCGCCTGGTGATGATCGCTCTGATCGCCGGTTTGATCGCCTCTGATCGCGTGATCGCTAATAAAAATGATCGCAAAGCCTGATCGCCATGATCGCGTGATCGCCTGATCGCCTGTGATCGCTGATCGCGCAGTGATCGCGTAAGCATGATCGCCCTTTTCGATGATCGCCGTTGATCGCTGATCGCAGTATGATCGCTGATCGCAATTGATCGCATTTGATCGCCCTCTGATCGCAACTTCTGATCGCTGATCGCTGATCGCAAGGCACGGGTGATCGCGTTGATCGCTGATCGCGTGATCGCTGATCGCTTGTGATCGCTGATCGCCTCAAAGTGATCGCTTATGATCGCCGTTCGTGATCGCATCGTCGCTTTAAGTGATCGCGTGATCGCATTTGATCGCATGATCGCCATTTACCTGATCGCTATGATCGCGGGGTTGGCTGATCGCTGATCGCGATTGAGTGATCGCGGAGTGATCGCGTGAGTAATTGATACATTGGTGTTGATCGCTGCTGATCGCACCTCACACCGAGAGACGTGATCGCCTGATCGCATGATCGCGGAAGGCTGATCGCGCGTGATCGCTCAGATGATCGCTGATCGCCCATGATCGCCATACATGATCGCTGATCGCTCATGATCGCCTGATCGCCATGATCGCTGATCGCTGATCGCTGATCGCTTGATCGCATGATCGCTTGATCGCTGATCGCTGATCGCGCTGATCGCTACATATGATCGCACTGATCGCCTGATCGCACTTGATCGCCGTGATCGCATGATCGC','TGATCGCTG')
print(appear_time)

